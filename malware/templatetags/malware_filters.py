from django import template
import re

register = template.Library()

@register.filter
def get_known_viruses(value):
    match = re.search(r'Known viruses: (\d+)', value)
    return match.group(1) if match else '0'

@register.filter
def get_engine_version(value):
    match = re.search(r'Engine version: ([\d.]+)', value)
    return match.group(1) if match else 'N/A'

@register.filter
def get_scanned_directories(value):
    match = re.search(r'Scanned directories: (\d+)', value)
    return match.group(1) if match else '0'

@register.filter
def get_scanned_files(value):
    match = re.search(r'Scanned files: (\d+)', value)
    return match.group(1) if match else '0'

@register.filter
def get_infected_files(value):
    match = re.search(r'Infected files: (\d+)', value)
    return match.group(1) if match else '0'

@register.filter
def get_data_scanned(value):
    match = re.search(r'Data scanned: ([\d.]+ MB)', value)
    return match.group(1) if match else '0 MB'

@register.filter
def get_data_read(value):
    match = re.search(r'Data read: ([\d.]+ MB)', value)
    return match.group(1) if match else '0 MB'

@register.filter
def get_scan_time(value):
    match = re.search(r'Time: ([\d.]+ sec)', value)
    return match.group(1) if match else '0 sec'

@register.filter
def get_start_date(value):
    match = re.search(r'Start Date: ([\d: ]+)', value)
    return match.group(1) if match else 'N/A'

@register.filter
def get_end_date(value):
    match = re.search(r'End Date: ([\d: ]+)', value)
    return match.group(1) if match else 'N/A'

@register.filter
def split_path(value):
    """Verilen path'i '/' karakterine göre böler ve boş elemanları filtreler."""
    return [x for x in value.strip('/').split('/') if x]

@register.filter
def parse_clamav_output(output):
    """ClamAV çıktısını parse eder ve HTML formatında döndürür."""
    if not output:
        return "Tarama sonucu bulunamadı."
    
    # Temel istatistikleri çıkar
    stats = {
        'infected_files': 0,
        'total_files': 0,
        'total_dirs': 0,
        'total_errors': 0,
        'scan_time': 0
    }
    
    # İnfekte dosyaları bul
    infected_files = []
    for line in output.splitlines():
        if 'FOUND' in line:
            infected_files.append(line.strip())
            stats['infected_files'] += 1
        elif 'files scanned' in line:
            match = re.search(r'(\d+) files scanned', line)
            if match:
                stats['total_files'] = int(match.group(1))
        elif 'directories' in line:
            match = re.search(r'(\d+) directories', line)
            if match:
                stats['total_dirs'] = int(match.group(1))
        elif 'Time:' in line:
            match = re.search(r'Time: ([\d.]+)', line)
            if match:
                stats['scan_time'] = float(match.group(1))
    
    # HTML çıktısı oluştur
    html = f"""
    <div class="scan-summary">
        <p><strong>Toplam Taranan Dosya:</strong> {stats['total_files']}</p>
        <p><strong>Toplam Taranan Klasör:</strong> {stats['total_dirs']}</p>
        <p><strong>İnfekte Dosya Sayısı:</strong> {stats['infected_files']}</p>
        <p><strong>Tarama Süresi:</strong> {stats['scan_time']:.2f} saniye</p>
    </div>
    """
    
    if infected_files:
        html += """
        <div class="infected-files mt-3">
            <h6>İnfekte Dosyalar:</h6>
            <ul class="list-group">
        """
        for file in infected_files:
            html += f'<li class="list-group-item list-group-item-danger">{file}</li>'
        html += "</ul></div>"
    
    return html

@register.filter
def parse_rkhunter_output(output):
    """rkhunter çıktısını parse eder ve HTML formatında döndürür."""
    if not output:
        return "Tarama sonucu bulunamadı."
    
    # Uyarıları bul
    warnings = []
    for line in output.splitlines():
        if 'Warning:' in line:
            warnings.append(line.strip())
    
    # HTML çıktısı oluştur
    html = "<div class='scan-summary'>"
    if warnings:
        html += """
        <div class="warnings mt-3">
            <h6>Uyarılar:</h6>
            <ul class="list-group">
        """
        for warning in warnings:
            html += f'<li class="list-group-item list-group-item-warning">{warning}</li>'
        html += "</ul></div>"
    else:
        html += "<p class='text-success'>Herhangi bir uyarı bulunamadı.</p>"
    
    html += "</div>"
    return html

@register.filter
def parse_chkrootkit_output(output):
    """chkrootkit çıktısını parse eder ve HTML formatında döndürür."""
    if not output:
        return "Tarama sonucu bulunamadı."
    
    # İnfeksiyonları bul
    infections = []
    for line in output.splitlines():
        if 'INFECTED' in line or 'Warning:' in line:
            infections.append(line.strip())
    
    # HTML çıktısı oluştur
    html = "<div class='scan-summary'>"
    if infections:
        html += """
        <div class="infections mt-3">
            <h6>Bulunan İnfeksiyonlar:</h6>
            <ul class="list-group">
        """
        for infection in infections:
            html += f'<li class="list-group-item list-group-item-danger">{infection}</li>'
        html += "</ul></div>"
    else:
        html += "<p class='text-success'>Herhangi bir infeksiyon bulunamadı.</p>"
    
    html += "</div>"
    return html 