from django.db import models
from django.conf import settings
import os
import hashlib
from django.utils import timezone

class QuarantinedFile(models.Model):
    THREAT_LEVELS = [
        ('low', 'Düşük'),
        ('medium', 'Orta'),
        ('high', 'Yüksek'),
        ('critical', 'Kritik')
    ]

    filename = models.CharField(max_length=255)
    original_path = models.CharField(max_length=512)
    quarantine_path = models.CharField(max_length=512)
    malware_type = models.CharField(max_length=100)
    scan_tool = models.CharField(max_length=50)
    quarantine_time = models.DateTimeField(auto_now_add=True)
    file_size = models.BigIntegerField()
    file_hash = models.CharField(max_length=64)
    threat_level = models.CharField(max_length=20, choices=THREAT_LEVELS, default='medium')
    status = models.CharField(max_length=20, choices=[
        ('quarantined', 'Karantinada'),
        ('restored', 'Geri Yüklendi'),
        ('deleted', 'Silindi')
    ], default='quarantined')
    restore_time = models.DateTimeField(null=True, blank=True)
    delete_time = models.DateTimeField(null=True, blank=True)
    detected_by_user = models.CharField(max_length=100, default='system')

    def __str__(self):
        return f"{self.filename} ({self.malware_type})"

    class Meta:
        ordering = ['-quarantine_time']

    # The create_from_file method seems specific to the malware quarantine process
    # and uses fields specific to this model. It makes sense to move it with the model.
    @classmethod
    def create_from_file(cls, file_path, reason, scan_type):
        """Create a QuarantinedFile instance from a file."""
        filename = os.path.basename(file_path)
        quarantine_path = os.path.join(settings.QUARANTINE_DIR, filename + '.quarantine')
        
        # Calculate file hash
        sha256_hash = hashlib.sha256()
        with open(file_path, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        file_hash = sha256_hash.hexdigest()
        
        # Get file size
        file_size = os.path.getsize(file_path)
        
        return cls.objects.create(
            filename=filename,
            original_path=file_path,
            quarantine_path=quarantine_path,
            reason=reason,
            scan_type=scan_type,
            file_hash=file_hash, # Corrected field name to match model
            file_size=file_size # Corrected field name to match model
        )

    def get_file_size_display(self):
        """Dosya boyutunu okunabilir formatta döndürür"""
        # This method operates on the file_size field of this model, so it moves with it.
        size = self.file_size # Use self.file_size
        for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
            if size < 1024.0:
                return f"{size:.1f} {unit}"
            size /= 1024.0
        return f"{size:.1f} PB"

class ScanResult(models.Model):
    scan_path = models.CharField(max_length=512)
    scan_time = models.DateTimeField(auto_now_add=True)
    total_files = models.IntegerField(default=0)
    infected_files = models.JSONField(default=list)
    scan_results = models.JSONField(default=list)
    is_complete = models.BooleanField(default=False)
    error = models.TextField(null=True, blank=True)

    def __str__(self):
        return f"Scan of {self.scan_path} at {self.scan_time}"

    class Meta:
        ordering = ['-scan_time']



